Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># camelize2\n\nRecursively transform key strings to camel-case\n\n[![build status](https://secure.travis-ci.org/DenysIvko/camelize2.png)](http://travis-ci.org/DenysIvko/camelize2)\n\n## Why do we need camelize2?\n\n[camelize](https://github.com/substack/camelize) is a great and simple library.\nBut unfortunately repository seems to be dead and has not been updated for a long time.\n\nCamelize2 for the resque!\n\nThis library provides new features according to developer needs.\nThis library fixes issues of [camelize](https://github.com/substack/camelize).\nThis library is opened for [contributing](#contributing).\n\nwas initially forked from [camelize](https://github.com/substack/camelize).\n\n\n## Example\n\n``` js\nconst camelize = require('camelize');\n\nconst obj = {\n    fee_fie_foe: 'fum',\n    beep_boop: [\n        { 'abc.xyz': 'mno' },\n        { 'foo-bar': 'baz' }\n    ]\n};\n\nconst res = camelize(obj);\n\nconsole.log(JSON.stringify(res, null, 2));\n```\n\nOutput:\n\n```\n{\n  \"feeFieFoe\": \"fum\",\n  \"beepBoop\": [\n    {\n      \"abcXyz\": \"mno\"\n    },\n    {\n      \"fooBar\": \"baz\"\n    }\n  ]\n}\n```\n\n### Installing\n\nNPM\n\n```\nnpm install camelize2\n```\n\n\n## Running the tests\n\nYou can run tests with the following command:\n\n```\nnpm run test\n```\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for the process for submitting pull requests to us.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags).\n\n## Authors\n\n* **James Halliday** - *Initial work* - [camelize](https://github.com/substack/camelize)\n* **Denys Ivko** - *Inspired follower* -\n\nSee also the list of [contributors](https://github.com/DenysIvko/camelize2/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision ecdb95361d7af71403764c3d161689dc057ab000)
+++ README.md	(date 1554765580000)
@@ -9,13 +9,17 @@
 [camelize](https://github.com/substack/camelize) is a great and simple library.
 But unfortunately repository seems to be dead and has not been updated for a long time.
 
-Camelize2 for the resque!
+**Camelize2 for the resque!**
+
+:white_check_mark: This library provides new features according to developer needs.
 
-This library provides new features according to developer needs.
-This library fixes issues of [camelize](https://github.com/substack/camelize).
-This library is opened for [contributing](#contributing).
+:white_check_mark: This library fixes issues of [camelize](https://github.com/substack/camelize).
 
-was initially forked from [camelize](https://github.com/substack/camelize).
+:white_check_mark: This library uses Mocha for testing
+
+:white_check_mark: This library is opened for [contributing](#contributing).
+
+Initially was forked from [camelize](https://github.com/substack/camelize).
 
 
 ## Example
@@ -63,7 +67,7 @@
 
 ## Running the tests
 
-You can run tests with the following command:
+You can run Mocha tests with the following command:
 
 ```
 npm run test
Index: test/camel.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>var test = require('tape');\nvar camelize = require('../');\n\nvar obj = {\n    fee_fie_foe: 'fum',\n    beep_boop: [\n        { 'abc.xyz': 'mno' },\n        { 'foo-bar': 'baz' }\n    ]\n};\n\ntest('camelize a nested object', function (t) {\n    t.plan(1);\n    var res = camelize(obj);\n    t.deepEqual(res, {\n        \"feeFieFoe\": \"fum\",\n        \"beepBoop\": [\n            { \"abcXyz\": \"mno\" },\n            { \"fooBar\": \"baz\" }\n        ]\n    });\n});\n\ntest('string', function (t) {\n    t.plan(1);\n    t.equal(camelize('one_two'), 'oneTwo');\n});\n\ntest('date', function (t) {\n    t.plan(1);\n    var d = new Date();\n    t.equal(camelize(d), d);\n});\n\ntest('regex', function (t) {\n    t.plan(1);\n    var r = /1234/;\n    t.equal(camelize(r), r);\n});\n\ntest('only camelize strings that are the root value', function (t) {\n    t.plan(2);\n    t.equal(camelize('foo-bar'), 'fooBar');\n    var res = camelize({ 'foo-bar': 'baz-foo' });\n    t.deepEqual(res, { fooBar: 'baz-foo' });\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/camel.js	(revision ecdb95361d7af71403764c3d161689dc057ab000)
+++ test/camel.js	(date 1554765145000)
@@ -1,4 +1,4 @@
-var test = require('tape');
+var assert = require('assert');
 var camelize = require('../');
 
 var obj = {
@@ -9,38 +9,35 @@
     ]
 };
 
-test('camelize a nested object', function (t) {
-    t.plan(1);
-    var res = camelize(obj);
-    t.deepEqual(res, {
-        "feeFieFoe": "fum",
-        "beepBoop": [
-            { "abcXyz": "mno" },
-            { "fooBar": "baz" }
-        ]
-    });
-});
+describe('camelize2', function () {
+    it('nested object', function () {
+        var res = camelize(obj);
+        assert.deepEqual(res, {
+            'feeFieFoe': 'fum',
+            'beepBoop': [
+                { 'abcXyz': 'mno' },
+                { 'fooBar': 'baz' }
+            ]
+        });
+    });
 
-test('string', function (t) {
-    t.plan(1);
-    t.equal(camelize('one_two'), 'oneTwo');
-});
+    it('string', function () {
+        assert.equal(camelize('one_two'), 'oneTwo');
+    });
 
-test('date', function (t) {
-    t.plan(1);
-    var d = new Date();
-    t.equal(camelize(d), d);
-});
+    it('date', function () {
+        var d = new Date();
+        assert.equal(camelize(d), d);
+    });
 
-test('regex', function (t) {
-    t.plan(1);
-    var r = /1234/;
-    t.equal(camelize(r), r);
-});
+    it('regex', function () {
+        var r = /1234/;
+        assert.equal(camelize(r), r);
+    });
 
-test('only camelize strings that are the root value', function (t) {
-    t.plan(2);
-    t.equal(camelize('foo-bar'), 'fooBar');
-    var res = camelize({ 'foo-bar': 'baz-foo' });
-    t.deepEqual(res, { fooBar: 'baz-foo' });
+    it('only camelize strings that are the root value', function () {
+        assert.equal(camelize('foo-bar'), 'fooBar');
+        var res = camelize({'foo-bar': 'baz-foo'});
+        assert.deepEqual(res, {fooBar: 'baz-foo'});
+    });
 });
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    \"name\": \"camelize2\",\n    \"version\": \"1.0.0\",\n    \"description\": \"recursively transform key strings to camel-case\",\n    \"main\": \"index.js\",\n    \"devDependencies\": {\n        \"tape\": \"4.10.1\"\n    },\n    \"scripts\": {\n        \"test\": \"tape test/*.js\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git://github.com/DenysIvko/camelize2.git\"\n    },\n    \"homepage\": \"https://github.com/DenysIvko/camelize2\",\n    \"keywords\": [\n        \"camel-case\",\n        \"json\",\n        \"http\",\n        \"response\",\n        \"transform\"\n    ],\n    \"author\": {\n        \"name\": \"Denys Ivko\",\n        \"email\": \"ivkodenis92@gmail.com\"\n    },\n    \"license\": \"MIT\"\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision ecdb95361d7af71403764c3d161689dc057ab000)
+++ package.json	(date 1554765145000)
@@ -4,10 +4,10 @@
     "description": "recursively transform key strings to camel-case",
     "main": "index.js",
     "devDependencies": {
-        "tape": "4.10.1"
+        "mocha": "6.1.2"
     },
     "scripts": {
-        "test": "tape test/*.js"
+        "test": "mocha test/*.js"
     },
     "repository": {
         "type": "git",
